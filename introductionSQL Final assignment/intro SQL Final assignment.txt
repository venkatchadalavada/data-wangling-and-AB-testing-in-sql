Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000

code:

SELECT 
	COUNT (*) as nrecord
FROM Attribute 

ii. Business table = 10000

SELECT 
	COUNT (*) as nrecord
FROM Business

iii. Category table = 10000

SELECT 
	COUNT (*) as nrecord
FROM category

iv. Checkin table = 10000

SELECT 
	COUNT (*) as nrecord
FROM checkin

v. elite_years table = 10000

SELECT 
	COUNT (*) as nrecord
FROM elite_years


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000

SELECT 
	COUNT (DISCTINCT ID)
FROM business

ii. Hours =1562

SELECT 
	COUNT (distinct business_ID)
FROM hours


iii. Category =2643

SELECT 
	COUNT (distinct business_ID)
FROM category

iv. Attribute = 1115

SELECT 
	COUNT (distinct business_ID)
FROM attribute

v. Review = 10000

SELECT 
	COUNT (distinct ID)
FROM review



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:

SELECT *
FROM user
WHERE id IS NULL
	OR name IS NULL
	OR review_count IS NULL
	OR yelping_since IS NULL
	OR useful IS NULL
	OR funny IS NULL
	OR cool IS NULL
	OR fans IS NULL
	OR average_stars IS NULL
	OR compliment_hot IS NULL
	OR compliment_more IS NULL
	OR compliment_profile IS NULL
	OR compliment_cute IS NULL
	OR compliment_note IS NULL
	OR compliment_plain IS NULL
	OR compliment_cool IS NULL
	OR compliment_funny IS NULL
	OR compliment_writer IS NULL
	OR compliment_photos IS NULL
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT 
	city, 
	SUM (review_count) AS sum_review
FROM business
GROUP BY city
ORDER BY sum_review DESC
	
	
	Copy and Paste the Result Below:
	
+-----------------+------------+
| city            | sum_review |
+-----------------+------------+
| Las Vegas       |      82854 |
| Phoenix         |      34503 |
| Toronto         |      24113 |
| Scottsdale      |      20614 |
| Charlotte       |      12523 |
| Henderson       |      10871 |
| Tempe           |      10504 |
| Pittsburgh      |       9798 |
| Montréal        |       9448 |
| Chandler        |       8112 |
| Mesa            |       6875 |
| Gilbert         |       6380 |
| Cleveland       |       5593 |
| Madison         |       5265 |
| Glendale        |       4406 |
| Mississauga     |       3814 |
| Edinburgh       |       2792 |
| Peoria          |       2624 |
| North Las Vegas |       2438 |
| Markham         |       2352 |
| Champaign       |       2029 |
| Stuttgart       |       1849 |
| Surprise        |       1520 |
| Lakewood        |       1465 |
| Goodyear        |       1155 |
+-----------------+------------+
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT 
	Stars , 
	COUNT (*) as ncount
FROM business
WHERE city = 'Avon'
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+--------+
| stars | ncount |
+-------+--------+
|   1.5 |      1 |
|   2.5 |      2 |
|   3.5 |      3 |
|   4.0 |      2 |
|   4.5 |      1 |
|   5.0 |      1 |
+-------+--------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT 
	Stars , 
	COUNT (*) as ncount
FROM business
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------+--------+
| stars | ncount |
+-------+--------+
|   2.0 |      1 |
|   2.5 |      1 |
|   3.0 |      2 |
|   3.5 |      2 |
|   4.0 |      1 |
|   4.5 |      2 |
|   5.0 |      5 |
+-------+--------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT 
	name, 
	review_count
FROM user
ORDER BY review_count desc
LIMIT 3
	
		
	Copy and Paste the Result Below:

+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

based on the data, there is no trend showing that number of fans increases as the number of review increases. 
	
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
+-----------+--------------+------+

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: there are more love than hate review as shown in the count of review with love or hate respectively

	
	SQL code used to arrive at answer:

SELECT 
	COUNT (*) AS Nnumber, 
	'love text' AS text_review
FROM 
	review
WHERE text like '%love%'
UNION
SELECT
	COUNT (*) AS Nnumber, 
	'hate text' AS text_review
FROM 
	review
WHERE text like '%hate%'
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT 
	name, 
	fans
FROM user
ORDER BY fans desc
LIMIT 10
	
	
	Copy and Paste the Result Below:

	
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+


Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?


select *
from hours  join review on hours.business_ID=review.business_ID 
join business on business.ID=review.ID

there is no ID in business table that has businesss_ID who record number of hours from hours table


ii. Do the two groups you chose to analyze have a different number of reviews?

there are different number of review. business with more than 3 stars has avg number of review higher than those with less than 3 stars

+--------------------+---------------+
| star_category      |   avg nreview |
+--------------------+---------------+
| high star, above 3 | 35.3691423519 |
| low star, below 3  | 20.0827629123 |
+--------------------+---------------+
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:


SELECT
	star_category, 
	avg(review_count) as 'avg nreview'
FROM
	(select 
		*, 
		CASE WHEN stars>3.0 THEN 'high star, above 3' ELSE 'low star, below 3'
		END AS star_category 
	FROM
		business)
GROUP BY star_category
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: overall businesses overview, are they more store open/closes?

based on the data, there are more store open. 

+---------+--------+
| is_open | n_open |
+---------+--------+
|       0 |   1520 |
|       1 |   8480 |
+---------+--------+
         
SQL code used for analysis:

SELECT is_open, count (*) as n_open
from business
group by is_open


ii. Difference 2: correlation between store that close and open. is higher star (more than 3 rating) likely to have more store open?

based on the data, percentage of store open for high star (above 3 star) is higher than those with low star (below 3 star).
Hypothesis testing comparing proportion can be done in order to confirm this (p value >0.05 for 95% confidence interval).

+--------------------+---------+-------+---------+
| t1.star_category   | is_open | count | percent |
+--------------------+---------+-------+---------+
| high star, above 3 |       0 |   948 |      13 |
| high star, above 3 |       1 |  5838 |      86 |
| low star, below 3  |       0 |   572 |      17 |
| low star, below 3  |       1 |  2642 |      82 |
+--------------------+---------+-------+---------+ 
         
SQL code used for analysis:

SELECT 
	t1.star_category, 
	is_open, count(*) AS `count`, count(*)*100 / t2.total AS percent
FROM
	(
	SELECT 
		*, 
		CASE WHEN stars>3.0 THEN 'high star, above 3' ELSE 'low star, below 3' END AS star_category
	FROM 
		business) as t1
JOIN 
	(
    SELECT 
		star_category, 
		count(*) AS total 
    FROM 
		(
		SELECT 
			*, 
			CASE WHEN stars>3.0 THEN 'high star, above 3' ELSE 'low star, below 3' END AS star_category
		FROM 
			business)
		GROUP BY star_category) AS t2
ON t1.star_category = t2.star_category
GROUP BY t1.star_category, is_open;


	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: analysis of review and user. are user who have most fans, typically had a review as "funny" person?
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

inner join review and user table. group the data by name of user for their number of fans. select relevant column (name, number of fans,  number of review as funny person).
                           
                  
iii. Output of your finished dataset:

based on the data, the is no obvious trend showing that user with more fans are likely to have review as "funny"

+---------+----------+--------------+
| name    | countfan | review_funny |
+---------+----------+--------------+
| Ashley  |        2 |            0 |
| David   |        2 |            1 |
| Mark    |        2 |            2 |
| Amy     |        1 |            4 |
| Angel   |        1 |            0 |
| Angela  |        1 |            0 |
| Anthony |        1 |            9 |
| Antonia |        1 |            1 |
| April   |        1 |            0 |
| Arman   |        1 |            0 |
+---------+----------+--------------+

         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT 
	name,
	COUNT(fans) as countfan, 
	review.funny as review_funny
FROM user join review on review.ID=user.ID 
GROUP BY name
ORDER BY countfan desc
LIMIT 10;